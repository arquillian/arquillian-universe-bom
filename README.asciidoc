== Arquillian Universe unified dependencies

The Arquillian Universe BOM is a 'Bill of Material' Maven POM file collection
that make up a module stack that stretch across the whole Arquillian Universe.

This project aim to fulfill two main requirements:

. Simplify the 'Getting Started' experience
. Unify naming and versions

=== Usage

Include the following snippet in your POM xml file:

[source, xml]
----
<properties>
    <version.arquillian_universe>1.0.0.Alpha1</version.arquillian_universe>
</properties>

<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>org.arquillian</groupId>
            <artifactId>arquillian-universe</artifactId>
            <version>${version.arquillian_universe}</version>
            <scope>import</scope>
            <type>pom</type>
        </dependency>
    </dependencies>
</dependencyManagement>
----

Then include the individual modules as you see fit, by simply depending on the unified pom name:

[source, xml]
----
<dependencies>
    <dependency>
        <groupId>org.arquillian.universe</groupId>
        <artifactId>arquillian-junit</artifactId>
        <scope>test</scope>
        <type>pom</type>
    </dependency>
</dependencies>
----

=== Available modules

==== JUnit

The JUnit Container integration.

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-junit</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

===== Additional required dependencies

[source, xml]
----
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>${version.junit}</version>
    <scope>test</scope>
</dependency>
----

==== JUnit Standalone

The JUnit Standalone integration.

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-junit-standalone</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

===== Additional required dependencies

[source, xml]
----
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>${version.junit}</version>
    <scope>test</scope>
</dependency>
----

==== TestNG

The TestNG Container integration.

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-testng</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

===== Additional required dependencies

[source, xml]
----
<dependency>
    <groupId>org.testng</groupId>
    <artifactId>testng</artifactId>
    <version>${version.testng}</version>
    <scope>test</scope>
</dependency>
----

==== TestNG Standalone

The TestNG Standalone integration.

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-testng-standalone</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

===== Additional required dependencies

[source, xml]
----
<dependency>
    <groupId>org.testng</groupId>
    <artifactId>testng</artifactId>
    <version>${version.testng}</version>
    <scope>test</scope>
</dependency>
----

==== Cuckes in Space

Cukes in Space! allows you to deploy and run Cucumber features in the application server of your choice using the Arquillian test framework.

Documentation: https://github.com/cukespace/cukespace

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-cuckes</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

===== Optional Dependencies

[source, xml]
----
<dependency>
    <groupId>info.cukes</groupId>
    <artifactId>cucumber-java8</artifactId>
</dependency>
----

==== Arquillian Drone

The Arquillian Drone provides a simple way how to write functional tests for an application with a web-based user interface. Arquillian Drone brings the power of WebDriver into the Arquillian framework. WebDriver provides a language how to communicate with a browser, like filling the forms, navigating on the pages and validating their content.

Documentation: https://github.com/arquillian/arquillian-extension-drone

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-drone</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

==== Arquillian Graphene

Graphene project is designed as set of extensions for Selenium WebDriver project focused on rapid development and usability in Java environment.

Documentation: https://github.com/arquillian/arquillian-graphene

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-graphene</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

NOTE: you don't need to add `arquillian-drone` dependency since it is automatically added when using `arquillian-graphene`.

==== Arquillian Graphene Recorder

Browser screenshooter is an extension to Arquillian platform which provides the possibility to take screenshots of your tests. Only browser window is screened.

Documentation: https://github.com/arquillian/arquillian-graphene/tree/master/extension/screenshooter

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-graphene-recorder</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

NOTE: you don't need to add `arquillian-graphene` or `arquillian-recorder` dependency since it is automatically added when using `arquillian-graphene-recorder`.

==== Arquillian Warp

Warp fills the void between client-side and server-side testing.

This extension allow you to write client-side test which asserts server-side logic.

Documentation: https://github.com/arquillian/arquillian-extension-warp

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-warp</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

==== Arquillian Warp JSF

Warp JSF adds additional Warp capabilities to JSF requests.

Documentation: https://github.com/arquillian/arquillian-extension-warp

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-warp-jsf</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

NOTE: you don't need to add `arquillian-warp` dependency since it is automatically added when using `arquillian-warp-jsf`.

==== Arquillian Transaction JTA

Arquillian Transaction Extension allow you to influence the Transactional behavior of the Test via annotations.

Documentation: https://github.com/arquillian/arquillian-extension-transaction

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-transaction-jta</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

==== Arquillian Persistence

Arquillian Persistence Extension was created to help you writing tests where persistence layer is involved. Inspired by great framework called Unitils, it brings bunch of annotations to help you deal with the underlying data storage.

Documentation: https://github.com/arquillian/arquillian-extension-persistence

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-persistence</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

NOTE: you don't need to add `arquillian-transaction-jta` dependency since it is automatically added when using `arquillian-persistence`.

==== Arquillian Spring

Documentation: https://github.com/arquillian/arquillian-extension-spring

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-spring</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

===== Additional required dependencies

The Spring framework core and modules of choice.

==== Arquillian Spring Transaction

Documentation: https://github.com/arquillian/arquillian-extension-spring

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-spring-transaction</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

NOTE: you don't need to add `arquillian-spring` or `arquillian-transaction` dependency since it is automatically added when using `arquillian-spring-transaction`.

===== Additional required dependencies

The Spring framework core and modules of choice.

==== Arquillian Spring Persistence

Documentation: https://github.com/arquillian/arquillian-extension-spring

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-spring-persistence</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

NOTE: you don't need to add `arquillian-spring` or `arquillian-persistence` dependency since it is automatically added when using `arquillian-spring-persistence`.

===== Additional required dependencies

The Spring framework core and modules of choice.

==== Arquillian Spring Warp

Documentation: https://github.com/arquillian/arquillian-extension-spring

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-spring-warp</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

NOTE: you don't need to add `arquillian-spring` or `arquillian-warp` dependency since it is automatically added when using `arquillian-spring-warp`.

===== Additional required dependencies

The Spring framework core and modules of choice.

==== Arquillian Byteman

Byteman integration for the Arquillian Project

Mocking 2.0, Runtime bytecode manipulation in Integration tests.

Documentation: https://github.com/arquillian/arquillian-extension-byteman

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-byteman</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

===== Additional required dependencies

[source, xml]
----
<dependency>
    <groupId>org.jboss.byteman</groupId>
    <artifactId>byteman-submit</artifactId>
    <version>${version.byteman}</version>
    <scope>test</scope>
</dependency>
----

==== Arquillian Jacoco

Automagic remote in-container code coverage

Documentation: https://github.com/arquillian/arquillian-extension-jacoco

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-jacoco</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

===== Additional required dependencies

[source, xml]
----
<dependency>
    <groupId>org.jacoco</groupId>
    <artifactId>org.jacoco.core</artifactId>
    <version>${version.jacoco}</version>
    <scope>test</scope>
</dependency>
----

NOTE: See documentation for additional Maven configuration.

==== Arquillian Recorder

Arquillian Recorder project brings neat reports of your Arquillian tests.

Documentation: https://github.com/arquillian/arquillian-recorder/wiki/Reporter  + 
Documentation: https://github.com/arquillian/arquillian-recorder/wiki/Screenshooter + 
Documentation: https://github.com/arquillian/arquillian-recorder/wiki + 

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-recorder</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

==== Arquillian Recorder API

Arquillian Recorder API is a module with only the API and SPI dependencies for Recorder. This allow you to depend on the API in test/compile scope and optionally activate the complete Arquillian Reporter module in a different profile when you want the reports generated.

See Arquillian Recorder above.

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-recorder-api</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

==== Arquillian REST RestEasy 2.x

Arquillian REST Client Extension allows you to test your RESTful applications on the client side.

Sometimes you need to test your REST app as a black box. You know the interface (the contract), you have some input and know what results you expect. For that purpose Arquillian REST Client Extension is your friend.

Documentation: https://github.com/arquillian/arquillian-extension-rest/tree/master/rest-client

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-rest-resteasy2</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

===== Additional required dependencies

[source, xml]
----
<dependency>
    <groupId>org.jboss.resteasy</groupId>
    <artifactId>resteasy-jaxrs</artifactId>
    <version>${version.resteasy}</version>
</dependency>
----

==== Arquillian REST RestEasy 3.x

Arquillian REST Client Extension allows you to test your RESTful applications on the client side.

Sometimes you need to test your REST app as a black box. You know the interface (the contract), you have some input and know what results you expect. For that purpose Arquillian REST Client Extension is your friend.

Documentation: https://github.com/arquillian/arquillian-extension-rest/tree/master/rest-client

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-rest-resteasy3</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

==== Arquillian REST JAXRS 2.0

Arquillian REST Client Extension allows you to test your RESTful applications on the client side.

Sometimes you need to test your REST app as a black box. You know the interface (the contract), you have some input and know what results you expect. For that purpose Arquillian REST Client Extension is your friend.

Documentation: https://github.com/arquillian/arquillian-extension-rest/tree/master/rest-client

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-rest-jaxrs2</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

===== Additional required dependencies

A JAXRS compliant implementation.

==== Arquillian REST Jersey

Arquillian REST Client Extension allows you to test your RESTful applications on the client side.

Sometimes you need to test your REST app as a black box. You know the interface (the contract), you have some input and know what results you expect. For that purpose Arquillian REST Client Extension is your friend.

Documentation: https://github.com/arquillian/arquillian-extension-rest/tree/master/rest-client

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-rest-jersey</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

==== Arquillian REST Warp RestEasy

Arquillian Warp REST Extension allows you to test your RESTful applications on the server side.

This extension brings tools for intercepting the state of the executing service and exercise it through in container tests that can be executed directly before or after the service is being invoked.

Documentation: https://github.com/arquillian/arquillian-extension-rest/tree/master/warp-rest

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-rest-warp-resteasy</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

NOTE: you don't need to add `arquillian-warp` dependency since it is automatically added when using `arquillian-rest-warp-resteasy`.

===== Additional required dependencies

[source, xml]
----
<dependency>
    <groupId>org.jboss.resteasy</groupId>
    <artifactId>resteasy-jaxrs</artifactId>
    <version>${version.resteasy}</version>
</dependency>
----

==== Arquillian REST Warp Jersey

Arquillian Warp REST Extension allows you to test your RESTful applications on the server side.

This extension brings tools for intercepting the state of the executing service and exercise it through in container tests that can be executed directly before or after the service is being invoked.

Documentation: https://github.com/arquillian/arquillian-extension-rest/tree/master/warp-rest

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-rest-warp-jersey</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

NOTE: you don't need to add `arquillian-warp` dependency since it is automatically added when using `arquillian-rest-warp-jersey`.

===== Additional required dependencies

[source, xml]
----
<dependency>
    <groupId>org.glassfish.jersey.core</groupId>
    <artifactId>jersey-client</artifactId>
    <version>${version.jersey}/version>
</dependency>
----

==== Arquillian REST Warp JAXRS 2.0

Arquillian Warp REST Extension allows you to test your RESTful applications on the server side.

This extension brings tools for intercepting the state of the executing service and exercise it through in container tests that can be executed directly before or after the service is being invoked.

Documentation: https://github.com/arquillian/arquillian-extension-rest/tree/master/warp-rest

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-rest-warp-jaxrs2</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

NOTE: you don't need to add `arquillian-warp` dependency since it is automatically added when using `arquillian-rest-warp-jaxrs2`.

===== Additional required dependencies

A JAXRS compliant implementation.

==== Arquillian REST Warp CXF

Arquillian Warp REST Extension allows you to test your RESTful applications on the server side.

This extension brings tools for intercepting the state of the executing service and exercise it through in container tests that can be executed directly before or after the service is being invoked.

Documentation: https://github.com/arquillian/arquillian-extension-rest/tree/master/warp-rest

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-rest-warp-cxf</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

NOTE: you don't need to add `arquillian-warp` dependency since it is automatically added when using `arquillian-rest-warp-cxf`.

===== Additional required dependencies

[source, xml]
----
<dependency>
    <groupId>org.apache.cxf</groupId>
    <artifactId>cxf-rt-frontend-jaxrs</artifactId>
    <version>${version.cxf}</version>
</dependency>
----

==== Arquillian Cube Docker

Arquillian Cube is an Arquillian extension that can be used to manager Docker containers from Arquillian.

With this extension you can start a Docker container with a server installed, deploy the required deployable file within it and execute Arquillian tests.

The key point here is that if Docker is used as deployable platform in production, your tests are executed in a the same container as it will be in production, so your tests are even more real than before.

But it also lets you start a container with every required service like database, mail server, …​ and instead of stubbing or using fake objects your tests can use real servers.

Documentation: https://github.com/arquillian/arquillian-cube

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-cube-docker</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

==== Arquillian Cube OpenShift

Arquillian Cube is an Arquillian extension that can be used to manager Docker containers from Arquillian.

Documentation: https://github.com/arquillian/arquillian-cube

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-cube-openshift</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

==== Arquillian Cube Containerless

Arquillian Cube is an Arquillian extension that can be used to manager Docker containers from Arquillian.

The Containerless container integrates Docker images as normal Arquillian Containers without the need for any Java EE style server as a target.

Documentation: https://github.com/arquillian/arquillian-cube#containerless-server-and-docker

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-cube-containerless</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

==== Arquillian Cube Kubernetes

Arquillian Cube Kubernetes is an Arquillian extension that can be used to manager Kubernetes elements from Arquillian.

Documentation: http://arquillian.org/arquillian-cube/#_kubernetes

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-cube-kubernetes</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

==== Arquillian Cube Q Pumba

Arquillian Cube Q is an extension of Arquillian Cube (https://github.com/arquillian/arquillian-cube) that allows you to write chaos tests. Since Arquillian Cube Q is an extension of Cube, it relies on Docker to execute them.

It integrates with Pumba for container chaos.

Documentation: https://github.com/arquillian/arquillian-cube-q#container-chaos
Repository: https://github.com/arquillian/arquillian-cube-q

[source, java]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-cube-q-pumba</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

==== Arquillian Cube Q SimianArmy

Arquillian Cube Q is an extension of Arquillian Cube (https://github.com/arquillian/arquillian-cube) that allows you to write chaos tests. Since Arquillian Cube Q is an extension of Cube, it relies on Docker to execute them.

It integrates with SimianArmy for operative system chaos.

Documentation: https://github.com/arquillian/arquillian-cube-q#operative-system-chaos
Repository: https://github.com/arquillian/arquillian-cube-q

[source, java]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-cube-q-simianarmy</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

==== Arquillian Cube Q Toxic

Arquillian Cube Q is an extension of Arquillian Cube (https://github.com/arquillian/arquillian-cube) that allows you to write chaos tests. Since Arquillian Cube Q is an extension of Cube, it relies on Docker to execute them.

It integrates with Toxify for network chaos.

Documentation: https://github.com/arquillian/arquillian-cube-q#network-chaos
Repository: https://github.com/arquillian/arquillian-cube-q

[source, java]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-cube-q-toxic</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

==== Arquillian Pact Consumer

Arquillian Pact is the integration of all Arquillian philosophy/extensions into Consumer Driven Contracts approach using Pact-JVM.

Documentation: https://github.com/arquillian/arquillian-pact#arquillian-pact-consumer

[source, java]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-pact-consumer</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

===== Additional required dependencies

[source, xml]
----
<dependency>
    <groupId>au.com.dius</groupId>
    <artifactId>pact-jvm-consumer_2.11</artifactId>
    <scope>test</scope
    <version>3.5.0-beta.1</version> <!-- any 3.X -->
</dependency>
----

==== Arquillian Pact Provider

Arquillian Pact is the integration of all Arquillian philosophy/extensions into Consumer Driven Contracts approach using Pact-JVM.

Documentation: https://github.com/arquillian/arquillian-pact#arquillian-pact-provider

[source, java]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-pact-provider</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

===== Additional required dependencies

[source, xml]
----
<dependency>
    <groupId>au.com.dius</groupId>
    <artifactId>pact-jvm-provider_2.11</artifactId>
    <scope>test</scope
    <version>3.5.0-beta.1</version> <!-- any 3.X -->
</dependency>
----

==== Arquillian Governor JIRA

Arquillian Governor Extension and the implementations which use its API give you the possibility to programmatically choose what test methods of your Arquillian tests are going to be executed and what are going to be skipped by putting your custom annotations on the test methods.

Documentation: https://github.com/arquillian/arquillian-governor#arquillian-jira-governor-extension

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-governor-jira</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

==== Arquillian Governor GitHub

Arquillian Governor Extension and the implementations which use its API give you the possibility to programmatically choose what test methods of your Arquillian tests are going to be executed and what are going to be skipped by putting your custom annotations on the test methods.

Documentation: https://github.com/arquillian/arquillian-governor#arquillian-github-governor-extension

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-governor-github</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

==== Arquillian Governor Redmine

Arquillian Governor Extension and the implementations which use its API give you the possibility to programmatically choose what test methods of your Arquillian tests are going to be executed and what are going to be skipped by putting your custom annotations on the test methods.

Documentation: https://github.com/arquillian/arquillian-governor#arquillian-redmine-governor-extension

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-governor-redmine</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

==== Arquillian Governor Skipper

Arquillian Governor Extension and the implementations which use its API give you the possibility to programmatically choose what test methods of your Arquillian tests are going to be executed and what are going to be skipped by putting your custom annotations on the test methods.

Documentation: https://github.com/arquillian/arquillian-governor#arquillian-governor-skipper-extension

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-governor-skipper</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

==== Arquillian Governor Ignore

Arquillian Governor Extension and the implementations which use its API give you the possibility to choose what test methods of your Arquillian tests are going to be executed and what are going to be skipped based on configuration of class and method expressions in the Arquillian configuration.

Documentation: https://github.com/arquillian/arquillian-governor#arquillian-governor-ignore-extension

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-governor-ignore</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

==== Arquillian Spacelift

Arquillian process and package manager. Makes executing an external process or fetching platform dependent dependencies an easier job.

Documentation: https://github.com/arquillian/arquillian-spacelift

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-spacelift</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----

==== Arquillian Chameleon Container

Have you ever faced an issue that switching between container implementations isn’t that easy?

Testing against several containers (JBoss AS / JBoss EAP / WildFly) or even switching between different modes (Managed, Remote, Embedded) may result in bloated pom.xml.

Chameleon Containers are able to quickly adopt to your needs without too much hassle.

Documentation: https://github.com/arquillian/arquillian-container-chameleon

[source, xml]
----
<dependency>
    <groupId>org.arquillian.universe</groupId>
    <artifactId>arquillian-chameleon</artifactId>
    <scope>test</scope>
    <type>pom</type>
</dependency>
----
